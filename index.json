[{"content":"Intro   파이썬의 모든 자료형 숫자형 타입 선언 연산자 활용 형 변환 외부 모듈 사용   1. 파이썬의 모든 자료형  파이썬이 지원하는 자료형은 다음과 같다.  int: 정수 float: 실수 complex: 복소수 bool: 불린 (True or False) str: 문자열(시퀀스) list: 리스트(시퀀스) tuple: 튜플(시퀀스) set: 집합 dict: 사전  그러면 각 자료형의 구체적인 예를 알아보자.  # str : string 의 약어로, 문자열 자료형을 의미한다. \u0026gt; str1 = \u0026#34;Jeha\u0026#34; \u0026gt; str2 = \u0026#34;Anacondacong\u0026#34; # bool: boolean 의 약어로, True or False 자료형을 의미한다. \u0026gt; bool1 = True # float: 실수형 자료형을 의미한다. 소수점이 존재한다. # 소수점 아래가 0이어도, 소수점이 존재하므로 실수형 데이터다. \u0026gt; float1 = 10.0 # int : integer의 약어로, 정수형 데이터를 말한다. \u0026gt; int1 = 7 # list : 리스트형으로 대괄호 안에 열거된 데이터 타입을 말합니다. \u0026gt; list1 = [str1, str2] # tuple: 튜플이라 하며, 소괄호 또는 괄호 없이 , 마로만 열거된 형태를 말합니다. # dict : dictionary의 약어로, 중괄호 안에 key : value 로 구성된 데이터 형태입니다. \u0026gt; dict1 = { \u0026#34;name : \u0026#34;Machine Learning\u0026#34;, \u0026#34;version\u0026#34; : 2.0 } # set : 집합형 데이터 타입으로, dict 와 마찬가지로 중괄호 형태의 데이터입니다. \u0026gt; set1 = {7, 8, 9}  각 데이터 타입 출력은 다음과 같이 한다.  \u0026gt; print(type(str1)) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt; print(type(bool1)) \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt; \u0026gt; print(type(str2)) \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt; print(type(float1)) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026gt; print(type(int1)) \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt; print(type(dict1)) \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; \u0026gt; print(type(tuple1)) \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; \u0026gt; print(type(set1)) \u0026lt;class \u0026#39;set\u0026#39;\u0026gt; - 결론: 데이터 타입의 종류에는 숫자형, 문자형, 리스트, 튜플, 딕셔너리가 있다.\n 2. 숫자형 데이터 선언 # 정수 선언 \u0026gt; i = 77 \u0026gt; i2 = -14 \u0026gt; big_int = 888888888888888 #정수 출력 \u0026gt; print(i) 77 \u0026gt; print(i2) -14 \u0026gt; print(big_int) 888888888888888 # 실수 선언 \u0026gt; f = 0.9999 \u0026gt; f2 = 3.141592358 \u0026gt; f3 = - 4.2 # 실수 출력 \u0026gt; print(f) 0.9999 \u0026gt; print(f2) 3.141592358 \u0026gt; print(f3) -4.2 - 결론: 변수명 = 할당할 value값\n 3. 연산자 활용  숫자형 연산자 종류에는 다음과 같다.  + : 덧셈 - : 뺼셈 * : 곱셈 / = 나누기를 의마하며, 몫과 나머지로 구성된다. // : 나누기의 몫 부분을 출력한다. % : 나누기의 나머지 부분을 출력한다. x ** y : 제곱으로, x의 y제곱 을 의미한다.  그러면 연산 실습을 해보겠다.  # 변수 선언 \u0026gt; i1 = 39 \u0026gt; i2 = 939 \u0026gt; big_int1 = 123456789123456789012345678901234567890 \u0026gt; big_int2 = 999999999999999999999999999999999999999 \u0026gt; f1 = 1.234 \u0026gt; f2 = 3.939 # + \u0026gt; print(\u0026#34;i1 + i2 : \u0026#34;, i1 + i2) i1 + i2 : 978 \u0026gt; print(\u0026#34;f1 + f2 : \u0026#34;, f1 + f2) f1 + f2 : 5.173 \u0026gt; print(\u0026#34;big_int1 + big_int2 : \u0026#34;, big_int1 + big_int2) big_int1 + big_int2 : 1123456789123456789012345678901234567889 # 큰 값들도 연산이 가능하다. \u0026gt; a = 3 + 1.0 \u0026gt; print(a, type(a)) 4.1 \u0026lt;class \u0026#39;float\u0026#39; \u0026gt; # 정수형과 실수형을 같이 연산할 때, 정수형을 자동적으로 실수형으로 변환하여 계산한다. # - \u0026gt; print(\u0026#34;i1 - i2: \u0026#34;, i1 - i2) i1 - i2: -900 \u0026gt; print(\u0026#34;f1 - f2: \u0026#34;, f1 - f2) f1 - f2: -2.705 \u0026gt; print(\u0026#34;big_int1 - big_int2: \u0026#34;, big_int1 - big_int2) big_int1 - big_int2: -876543210876543210987654321098765432109 # * \u0026gt; print(\u0026#34;i1 * i2: \u0026#34;, i1 * i2) i1 * i2: 36621 \u0026gt; print(\u0026#34;f1 * f2: \u0026#34;, f1 * f2) f1 * f2: 4.860726 \u0026gt; print(\u0026#34;big_int1 * big_int2: \u0026#34;, big_int1 * big_int2) big_int1 * big_int2: 123456789123456789012345678901234567889876543210876543210987654321098765432110 # / \u0026gt; print(\u0026#34;i2 / i1: \u0026#34;, i2 / i1) i2 / i1: 24.076923076923077 \u0026gt; print(\u0026#34;f2 / f1: \u0026#34;, f2 / f1) f2 / f1: 3.1920583468395463 \u0026gt; print(\u0026#34;big_int2 / big_int1: \u0026#34;, big_int2 / big_int1) big_int2 / big_int1: 8.10000006561 # // \u0026gt; print(\u0026#34;i2 // i1: \u0026#34;, i2 // i1) i2 // i1: 24 # i2 / i1 의 연산값의 몫 부분임을 알 수 있다. \u0026gt; print(\u0026#34;f2 // f1: \u0026#34;, f2 // f1) f2 // f1: 3.0 # f2 / f1 의 연산값의 몫 부분임을 알 수 있다. \u0026gt; print(\u0026#34;big_int2 // big_int1: \u0026#34;, big_int2 // big_int1) big_int2 // big_int1: 8 # big_int2 / big_int1 의 연산값의 몫 부분임을 알 수 있다. # % \u0026gt; print(\u0026#34;i2 % i1 :\u0026#34;, i2 % i1) i2 % i1 : 3 # i1 * (i2 // i1) 으로 i2를 나누고 나온 나머지값 \u0026gt; print(\u0026#34;f2 % f1 :\u0026#34;, f2 % f1) f2 % f1 : 0.2370000000000001 \u0026gt; print(\u0026#34;big_int1 % big_int2 :\u0026#34;, big_int1 % big_int2) big_int1 % big_int2 : 123456789123456789012345678901234567890 # ** 와 pow(x,y) \u0026gt; print(\u0026#34;2 ** 3: \u0026#34;, 2 ** 3) \u0026gt; print(\u0026#34;2 ** 3: \u0026#34;, pow(2,3)) 2 ** 3: 8 2 ** 3: 8 \u0026gt; print(\u0026#34;i1 ** i2: \u0026#34;, i1 ** i2) \u0026gt; print(\u0026#34;i1 ** i2: \u0026#34;, pow(i1,i2)) i1 ** i2: 102250631262663558380..... i1 ** i2: 102250631262663558380..... # 너무 길어서 생략 \u0026gt; print(\u0026#34;f1 ** f2: \u0026#34;, f1 ** f2) \u0026gt; print(\u0026#34;f1 ** f2: \u0026#34;, pow(f1,f2)) f1 ** f2: 2.289235194260789 f1 ** f2: 2.289235194260789 4. 형 변환  형 변환 함수는 다음과 같다.  abs(x): absolute의 약어로, 절대값으로 변환한다. int(x): 정수형으로 만듭니다. 실수를 입력했다면 실수의 정수 부분을 출력한다. float(x): 실수형으로 만듭니다. 정수를 입력했다면 소수점 .0 으로 나온다. complex(x): 복소수로 허수까지 포함해서 a+bi 형태로 변환한다. pow(x, y): x의 y승 제곱으로 출력된다. a = 3. b = 9 c = .65 d = 13.55 # type 출력 \u0026gt; print(type(a), type(b), type(c), type(d)) \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; # 형 변환 \u0026gt; print(float(b))  #정수 -\u0026gt; 실수 9.0 \u0026gt; print(int(c)) # 실수 -\u0026gt; 정수 0 \u0026gt; print(ind(D)) # 실수 -\u0026gt; 정수 13 \u0026gt; print(int(True)) # Bool -\u0026gt; 정수 1 \u0026gt; print(float(True)) # Bool -\u0026gt; 실수 1.0 \u0026gt; print(int(False)) 0 \u0026gt; print(float(False)) 0.0 \u0026gt; print(complex(3)) # 정수 -\u0026gt; 복소수 3 +0j \u0026gt; print(complex(\u0026#39;3\u0026#39;)) # 문자형 -\u0026gt; 복소수 3 + 0j # string data type을 숫자형으로 바꾸고 나서 복소수를 처리해야 하는데, 바로 처리된다. \u0026gt; print(complex(False)) # Bool -\u0026gt; 복소수 0j # 수치 연산 함수 \u0026gt; print(abs(-7)) 7 # divmod(x,y) : x를 y로 나눴을 때, 몫과 나머지를 반환한다. 많이 사용되는 함수로 중요하다. \u0026gt; x, y = divmod(100, 8) #몫 과 나머지 \u0026gt; print(x, y) 12 4 \u0026gt; print(pow(5, 3)) \u0026gt; print(5**3) 125 125 - 결론: 다른 data type으로 형 변환이 가능하다.\n5. 외부 모듈 사용  import 를 사용한다.  # 외부 모듈을 불러오는 함수 \u0026gt; import math # math 모듈에서 ceil 이란 함수를 사용하겠다. # ceil(x) : x 이상의 수중에서 가장 작은 정수를 반환한다. \u0026gt; print(math.ceil(5.2)) 6 \u0026gt; print(math.pi) 3.1415926535 - 결론: import를 사용하여 외부 module을 가져온다.\nReference  Python tutorial  ","permalink":"http://jeha00.github.io/post/python_basic_3/","summary":"python의 자료형 종류에는 무엇이 있는지 알아보고, 숫자형 데이터 타입의 선언, 연산, 그리고 형 변환에 대해 중점적으로 알아보겠다.","title":"[TIL] Python basic 3: 숫자형 데이터"},{"content":"Intro   기본 출력 String 문자열 출력 Integer 정수형 출력 Float 실수형 출력   formatting을 하면 특정 케이스에 원하는 형식대로 출력할 수 있고, 가독성이 높아진다.\n1. 기본 출력 1.1 Escape 코드 \\n: 개행 \\t: 탭 \\\\: 문자 \\\u0026#39;: 문자 \\\u0026#34;: 문자 \\000: 널 문자 1.2 기본 출력  '' 또는 \u0026quot;\u0026quot; 를 자주 사용한다.  \u0026gt; print(\u0026#39;JeHa start!\u0026#39;) \u0026gt; print(\u0026#34;JeHa start!\u0026#34;) \u0026gt; print() \u0026gt; print(\u0026#39;\u0026#39;\u0026#39;JeHa start!\u0026#39;\u0026#39;\u0026#39;) \u0026gt; print(\u0026#39;\u0026#39;) \u0026gt; print(\u0026#34;\u0026#34;\u0026#34;JeHa start!\u0026#34;\u0026#34;\u0026#34;) # 아무것도 출력되지 않는다. \u0026gt; print(\u0026#39;\u0026#39;) \u0026gt; print()  결과는 다음과 같다.  JeHa start! JeHa start! JeHa start! JeHa start! 1.3 Separator 옵션  여러 data를 열거하여 출력할 때, 각 data 사이 사이를 분리할 string을 입력할 수 있다.  \u0026gt; print(\u0026#39;python\u0026#39;, \u0026#39;start!\u0026#39;, sep=\u0026#39;@\u0026#39;) python @ start! \u0026gt; print(\u0026#39;p\u0026#39;,\u0026#39;y\u0026#39;,\u0026#39;t\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;n\u0026#39;) p y t h o n \u0026gt; print(\u0026#39;p\u0026#39;,\u0026#39;y\u0026#39;,\u0026#39;t\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;n\u0026#39;, sep = \u0026#39;\u0026#39;) python \u0026gt; print(\u0026#39;010\u0026#39;, \u0026#39;6677\u0026#39;, \u0026#39;6677\u0026#39;, sep = \u0026#39;-\u0026#39; ) 010-6677-6677 \u0026gt; print(\u0026#39;python\u0026#39;, \u0026#39;google.com\u0026#39;, sep = \u0026#39;@\u0026#39;) python@google.com 1.4 End 옵션  print에는 자동적으로 행간을 나누는 기능이 있다. 이를 end를 통해서 합칠 수 있다.  \u0026gt; print(\u0026#39;I\u0026#39;) \u0026gt; print(\u0026#39;love\u0026#39;) \u0026gt; print(\u0026#39;u\u0026#39;) I Love u \u0026gt; print(\u0026#39;I\u0026#39;, end = \u0026#39; \u0026#39;) \u0026gt; print(\u0026#39;love\u0026#39;, end = \u0026#39; \u0026#39;) \u0026gt; print(\u0026#39;u\u0026#39;) I love u 2. String 문자열 출력 (s)  d는 정수, s는 string, f는 실수를 의미한다. % 로 formatting 하는 방법과 .format 을 사용해서 formatting하는 방법이 있다. 다 익숙해져야 하지만, 후자를 더 빈번히 사용한다.  # 순서에 맞게 자동적으로 mapping 해준다. \u0026gt; print(\u0026#39;%s %s\u0026#39; % (\u0026#39;one\u0026#39;,\u0026#39;two)) \u0026gt; print(\u0026#39;{} {}\u0026#39;.format(\u0026#39;one\u0026#39;,\u0026#39;two\u0026#39;)) # 순서를 지정해서도 할 수 있다. # index[1] 은 two, index[0]은 one 이므로, 교차해서 mapping 된다. \u0026gt; print(\u0026#39;{1} {0}\u0026#39;.format(\u0026#39;one\u0026#39;,\u0026#39;two\u0026#39;)) one two one two two one  전체 자릿수를 지정하는 방법과 정렬 방향을 바꾸는 방법을 알아보겠다.  # 문자열 총 자리 수는 10자리를 의미한다. # 오른쪽 정렬 # 즉, blank 시작은 왼쪽부터다. \u0026gt; print(\u0026#39;%10s\u0026#39; % (likelike)) # 왼쪽 blank는 2칸이다. likelike # 방향을 반대로 하기 위해서는 (-)를 붙힌다: 왼쪽정렬 \u0026gt; print(\u0026#39;%-10s\u0026#39; % (likelike)) likelike  위 내용을 .format으로 표현해보자. .format은 string을 입력할 때 \u0026rsquo;s\u0026rsquo;를 입력하지 않아도 된다.  # 오른쪽 정렬 \u0026gt; print(\u0026#39;{:\u0026gt;10}\u0026#39;.format(\u0026#39;likelike\u0026#39;)) likelike # 왼쪽 정렬 \u0026gt; print(\u0026#39;{:\u0026lt;10}\u0026#39;.format(\u0026#39;likelike\u0026#39;)) likelike \u0026gt; print(\u0026#39;{:10}\u0026#39;.format(\u0026#39;likelike\u0026#39;)) likelike # 가운데 정렬 \u0026gt; print(\u0026#39;{:^10}\u0026#39;.format(\u0026#39;likelike\u0026#39;)) likelike # blank에는 언더바가 있도록 하는 것 \u0026gt; print(\u0026#39;{:_\u0026gt;10}\u0026#39;.format(\u0026#39;like\u0026#39;)) ______like  그러면 지정한 자릿수보다 문자열이 더 길다면??  \u0026gt; print(\u0026#39;%5s\u0026#39; % (\u0026#39;likelike\u0026#39;)) likelike # 다 출력된다.  지정한 자릿수를 넘는 문자열 부분들을 절삭하고 싶다면??  # . 점을 아래와 같이 표시한다. \u0026gt; print(\u0026#39;%.5s\u0026#39; % \u0026#39;likelike\u0026#39;) likel # 이것은 어떻게 출력될까?? \u0026gt; print(\u0026#39;%10.5s\u0026#39; % (\u0026#39;likelike\u0026#39;)) # 지정한 문자열 총 자리수는 10자리고, 5자리를 넘으면 절삭한다. # blank가 5자리고, 왼쪽에서부터 오른쪽 방향으로 채워진다. # 나머지 5자리에 문자가 채워진다. _____likel # format으로 표현해보자 \u0026gt; print(\u0026#39;{:\u0026gt;10.5}\u0026#39;.format(\u0026#39;likelike\u0026#39;)) 결론\n print('-%n1.n2s' % (\u0026lsquo;출력하기 원하는 문자열\u0026rsquo;))   n1은 전체 자릿수 n2는 출력되길 원하는 문자열의 총 자리수를 의미 \u0026lsquo;-\u0026lsquo;는 정렬 방향을 역으로 한다. 정렬 방향 default는 오른쪽, (-)는 왼쪽 정렬을 의미    print('{:^ \u0026gt; \u0026lt; n1.n2}'.format(\u0026lsquo;string\u0026rsquo;))   n1은 전체 자릿수 n2는 출력되길 원하는 문자열의 총 자리수를 의미 \u0026lsquo;^\u0026rsquo; 는 가운데 정렬 \u0026lsquo;\u0026gt;\u0026lsquo;은 오른쪽 정렬, \u0026lsquo;\u0026lt;\u0026rsquo; 는 왼쪽 정렬을 의미 .format은 s를 입력하지 않는다.      3. Integer 정수형 출력 (d)  .format 은 문자열 s는 입력하지 않는다. 정수형 d or i, 실수형 f 은 입력한다.  \u0026gt; print(\u0026#39;%d %d\u0026#39; % (1, 2)) 1,2 \u0026gt; print(\u0026#39;{} {}\u0026#39;.format(1,2)) 1,2 \u0026gt; print(\u0026#39;{1} {0}.format(1,2)\u0026#39;) 2,1 \u0026gt; print(\u0026#39;%4d\u0026#39; % (24)) \u0026gt; print(\u0026#39;{:\u0026gt;4d}\u0026#39;.format(24)) \u0026gt; print(\u0026#39;{:4d}\u0026#39;.format(24)) 24 \u0026gt; print(\u0026#39;%-4d\u0026#39; % (24)) \u0026gt; print(\u0026#39;{:\u0026lt;4d}\u0026#39;.format(24)) 24 \u0026gt; print(\u0026#39;{:^4d}\u0026#39;.format(24)) 24 \u0026gt; print(\u0026#39;{:_\u0026gt;4d}\u0026#39;.format(24)) __24 \u0026gt; print(\u0026#39;{:_\u0026lt;4d}\u0026#39;.format(24)) 24__ \u0026gt; print(\u0026#39;{:_^4d}\u0026#39;.format(24)) _24_ 결론\n print('-%n1d\u0026rsquo; % (integer))   n1은 전체 자릿수 \u0026lsquo;-\u0026lsquo;는 정렬 방향을 역으로 한다. 정렬 방향 default는 오른쪽, (-)는 왼쪽 정렬을 의미    print('{:^ \u0026gt; \u0026lt; n1d}'.format(integer))   n1은 전체 자릿수 \u0026lsquo;^\u0026rsquo; 는 가운데 정렬 default와 \u0026lsquo;\u0026gt;\u0026lsquo;은 오른쪽 정렬, \u0026lsquo;\u0026lt;\u0026rsquo; 는 왼쪽 정렬을 의미      3. Float 실수형 출력 (f) # 전체 실수자리를 따로 지정하지 않으면 8자리까지 출력된다. \u0026gt; print(\u0026#39;%f\u0026#39; % (3.1415926535)) \u0026gt; print(\u0026#39;{:f}\u0026#39;.format(3.1415926535)) 3.141593 # 3.141592가 아니고, 반올림되어 3.141593 이다. # 소수 부분 8자리 \u0026gt; print(\u0026#39;%.8f\u0026#39; % (3.1415926535)) 3.14159265 # 반올림 되어 맨 마지막 자리 수가 5다. # 소수 부분 12자리 \u0026gt; print(\u0026#39;%.12f\u0026#39; % (3.1415926535)) 3.1415926535 # 소수점(.)까지 포함하여 6자리고, 소수 부분은 2자리, 빈 부분은 0으로 표시한다. \u0026gt; print(\u0026#39;%06.2f\u0026#39; % (3.1415926535)) \u0026gt; print(\u0026#39;{:06.2f}\u0026#39;.format(3.1415926535)) 003.14 # 소수점(.)까지 포함하여 6자리고, 소수 부분은 2자리, 빈 부분은 blank로 둔다. # blank가 있기 때문에 정렬 개념이 적용된다. 그래서 오른쪽 정렬된 상태 \u0026gt; print(\u0026#39;%6.2f\u0026#39; % (3.1415926535)) 3.14 # 왼쪽 정렬 상태 \u0026gt; print(\u0026#39;%-6.2f\u0026#39; % (3.1415926535)) 3.14 결론\nprint('%n1.n2f\u0026rsquo; % ())\nprint('{:n1.n2f}'.format())\n n1 은 전체 자릿수로서, 소수점을 포함한다. n2는 소수점 자리를 말한다. n1 앞에 0이 붙으면 정수 부분에서 비어있는 자리수는 0으로 표기된다.   Reference  Python tutorial  ","permalink":"http://jeha00.github.io/post/python_basic_2/","summary":"Intro   기본 출력 String 문자열 출력 Integer 정수형 출력 Float 실수형 출력   formatting을 하면 특정 케이스에 원하는 형식대로 출력할 수 있고, 가독성이 높아진다.\n1. 기본 출력 1.1 Escape 코드 \\n: 개행 \\t: 탭 \\\\: 문자 \\\u0026#39;: 문자 \\\u0026#34;: 문자 \\000: 널 문자 1.2 기본 출력  '' 또는 \u0026quot;\u0026quot; 를 자주 사용한다.  \u0026gt; print(\u0026#39;JeHa start!\u0026#39;) \u0026gt; print(\u0026#34;JeHa start!\u0026#34;) \u0026gt; print() \u0026gt; print(\u0026#39;\u0026#39;\u0026#39;JeHa start!\u0026#39;\u0026#39;\u0026#39;) \u0026gt; print(\u0026#39;\u0026#39;) \u0026gt; print(\u0026#34;\u0026#34;\u0026#34;JeHa start!","title":"[TIL] Python basic 2: print 사용법"},{"content":"Intro   변수 할당 설명 Object Identity 변수 네이밍 선언방법과 예약어    1. 변수 할당 설명 1.1 기본 선언  다른 프로그래밍 언어는 변수 타입을 정하고 나서 값을 할당한다. 반면에, Python은 값을 정하고 나서 변수 타입을 알아서 할당해준다. 이 변수를 할당한다는 건 물리적으로 즉, 컴퓨터 내부적으로 컴퓨터 메모리의 일부를 할당하는 의미로, \u0026lsquo;고유 주소\u0026rsquo;가 지정된다는 걸 의미한다. 이 \u0026lsquo;고유 주소\u0026rsquo;는 id 라는 명령어로 확인할 수 있다. 함수 id: 객체(object)의 고유값 id(identity) 을 확인  # 700이라는 int type의 data를 n에 할당한다. \u0026gt; n = 700 # \u0026#39;n\u0026#39;이라는 변수의 data type을 확인해보자. \u0026gt; print(type(n)) # \u0026#39;n\u0026#39; 이라는 변수에 할당된 메모리 고유주소를 확인해보자. \u0026gt; print(id(n)) - 결론 : 선언을 한다는 건 메모리 값을 할당하는 걸 의미한다. 이는 id 값을 통해 고유주소를 확인하여 알 수 있다.\n1.2 동시 선언  만약 명칭만 다른 세 변수에 동일한 value가 할당된 경우, id는 어떻게 나올까?  # x, y, z에 동일한 값을 할당한다. # 동일한 object 참조 \u0026gt; x = y = z = 700 \u0026gt; print(x, y, z) # x의 id 와 y의 id는 같은가? \u0026gt; print(id(x) == id(y)) \u0026gt; print(id(x), id(y)) # y의 id 와 z의 id는 같은가? \u0026gt; print(id(y) == id(z)) \u0026gt; print(id(z))  위 두 질문의 결과는 True가 나온다. 동일한 값과 type을 가지고 있기 때문에 메모리 주소가 동일하다는 걸 알 수 있다. 즉, 3개를 선언했지만 실제로 존재하는 건 1개라는 의미다. 파이썬이 하나의 오브젝트로 생성해버린다. 이러한 걸 동시선언 이라고 하며, 파이썬에서는 가능하다. 이처럼 하나 하나 최적화를 시키면 원활하고 빠른 프로그램 실행 흐름이 가능하다.  - 결론: 여러 변수에 똑같은 값을 할당하면 파이썬은 내부에서 하나만 만들어진다.\n1.3 재선언  변수의 명칭은 동일하나 다른 value를 할당해보겠다.  # 동일 명칭의 변수가 다른 object를 참조 # var이란 변수에 75라는 정수형 데이터를 할당되었다. \u0026gt; var = 75 \u0026gt; print(var) \u0026gt; print(id(var)) # int. 형이 아닌 string 형 데이터를 재할당한다. \u0026gt; var = \u0026#34;Change Value\u0026#34; \u0026gt; print(var) \u0026gt; print(id(var))  결과는 다음과 같다.  \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; 2298218369712 Change Value \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 2298224531568  data type과 value가 변하자 id값이 달라진 걸 알 수 있다. 이것이 가능한 이유가 파이썬에는 garbage collector 가 있기 때문이다. 실제로 재선언할 때는 프로그램의 흐름이 끝날 떄까지 잘 추적하는 게 중요하다. 재선언을 통해서 프로그램의 흐름이 꼬여질 수도 있기 때문이다. 그래서 큰 project에서는 변수의 사전이 엑셀이나 기타 문서로 존재한다고 한다.  - 결론: 동일한 명칭의 변수여도 할당된 값이 변하면 파이썬이 알아서 id 값을 바꾼다.\n 2. Object References 변수가 할당 상태일 때, 아래와 같은 상태가 일어나는 걸 의미한다. (예 : n = 700이라 선언했을 때)\n첫 번째, type에 맞는 object를 생성: type을 통해서 class \u0026lsquo;int\u0026rsquo;라는 오브제트가 생성됨을 알 수 있다. 두 번쨰, 값 생성: 700을 안에서 생성 세 번째, 콘솔 출력 : 700이 출력된다.\n 더 다양한 예제를 살펴보자.  #예1) 아래 출력은 동일하다. 즉, int() 를 하지 않아도 내부적으로 처리된다. \u0026gt; print(300) \u0026gt; print(int(300)) #예2) \u0026gt; n = 800 \u0026gt; print(n, type(n)) # int형의 오브젝트임로 생성되었다. 그리고 출력된다. \u0026gt; m = n \u0026gt; print(m, n) \u0026gt; print(type(m), type(n)) \u0026gt; m = 400 \u0026gt; print(m, n) \u0026gt; print(type(m), type(n)) \u0026gt; m = 800 \u0026gt; n = 600 #m과 n의 고유값이 다르다. \u0026gt; print(id(m), id(n)) \u0026gt; print(id(m)==id(n)) 3. 다양한 변수 선언방법과 예약어  이 규칙들을 가지고 변수를 선언하면 세련되고, 코드를 재활용할 때 가독성이 좋은 소스 코드로 만들 수 있다.   Camel Case : method를 선언할 때 사용. ex) numberOfCollegeGraduates Pascal Case : 언어 상관 없이 class를 주로 선언할 때 사용. ex) umberOfCollegeGraduates snake case: 파이썬에서 변수를 선언 시 사용. ex) number_of_college_graduates\n Camel과 Pascal의 차이는 첫 문자가 소문자냐 대문자냐의 차이다.\n 이외에 허용하는 변수 선언 법은 다음과 같다.  숫자로 시작하지 않는다. 변수는 되도록 snake case로 선언한다. 예약어 같이 문법에 사용되는 단어는 변수명으로 불가능하다.\n   \u0026gt; age = 1 \u0026gt; Age = 2 \u0026gt; aGe = 3 \u0026gt; AGE = 4 \u0026gt; a_g_e = 5 \u0026gt; _age = 6 \u0026gt; age_ = 7 \u0026gt; _AGE_ = 8  예약어는 python reserved words로 검색하면 나온다. 예약어의 종류는 다음과 같다.  False\tdef\tif\traise None\tdel\timport\treturn True\telif\tin\ttry and\telse\tis\twhile as\texcept\tlambda\twith assert\tfinally\tnonlocal\tyield break\tfor\tnot class\tfrom\tor continue\tglobal\tpass  Reference  Python tutorial  ","permalink":"http://jeha00.github.io/post/python_basic_1/","summary":"Intro   변수 할당 설명 Object Identity 변수 네이밍 선언방법과 예약어    1. 변수 할당 설명 1.1 기본 선언  다른 프로그래밍 언어는 변수 타입을 정하고 나서 값을 할당한다. 반면에, Python은 값을 정하고 나서 변수 타입을 알아서 할당해준다. 이 변수를 할당한다는 건 물리적으로 즉, 컴퓨터 내부적으로 컴퓨터 메모리의 일부를 할당하는 의미로, \u0026lsquo;고유 주소\u0026rsquo;가 지정된다는 걸 의미한다. 이 \u0026lsquo;고유 주소\u0026rsquo;는 id 라는 명령어로 확인할 수 있다. 함수 id: 객체(object)의 고유값 id(identity) 을 확인  # 700이라는 int type의 data를 n에 할당한다.","title":"[TIL] Python basic 1 변수 선언"},{"content":"\nMonthly Memoirs 월별 회고  \u0026lsquo;성찰 없는 발전\u0026rsquo;은 존재하지 않는다. 성찰이 발전으로 확실히 가기 위해 \u0026lsquo;기록\u0026rsquo;이 필요하다. 또한, 기록을 통해 \u0026lsquo;나\u0026rsquo;를 알고, 사람을 이해하여 \u0026lsquo;선한 마음\u0026rsquo; 을 이루자. 선한 마음과 꾸준함이 \u0026lsquo;비범함\u0026rsquo;을 만든다.  작성 규칙  M.M (Monthly Memoirs)은 새로 온 달의 첫 주말에 시간을 내어 작성한다. 작성하기 전 충분한 시간을 가지고 한달을 회고한다. 목표한 공부 계획에 맞춰 얼마나 성취했는지 각 목표 계획을 소제목으로 하여 회고를 작성한다. 부끄러움과 후회를 두려워하지 말라. 점차 줄여가자. 제목 형식: 2022-mm.md 3개월을 시도한 후, M.M 에 추가하여 W.M (Weekly Moemoirs)를 실행할지 말지 판단한다.   ","permalink":"http://jeha00.github.io/post/monthly-memoirs/","summary":"Monthly Memoirs 작성하는 이유를 설명하고, 앞으로의 규칙을 지키자는 다짐을 하기 위해 작성한다.","title":"Monthly Memoirs 작성 이유와 규칙"},{"content":"Intro window 10 환경에서 Hugo 라는 SSG의 한 종류를 사용해서 \u0026lt;user-id\u0026gt;.github.io 주소의 github page를 만들고 배포한 후, contents를 업로드하는 것까지 내용을 다룬다. 이를 위해 총 5단계를 거쳐서 진행한다.\n  Static Site Generator 로 Hugo를 선택한 이유 Github blog 만들기 위한 local 환경 조성 새로운 2개 github repo 와 local 연결하기 Github page에 theme 적용 Contents 생성과 업로드, utterances로 댓글 기능 추가, deploy.sh로 자동화 To customize blog theme 후기   위 과정들에서 필요한 개념들, 부딪혔던 error 및 해결책도 각 단계 마지막 부분에 작성했다.\n 동일한 주제로 다룬 블로그들을 보면 3단계와 4단계의 순서를 바꿔서 진행한다. 4단계 진행 후, 3단계를 진행해도 무방하다. 다만, 나는 그 과정에서 헷갈린 부분이 있어서 마지막에 theme 적용을 하기로 선택했다.\n  1. Static Site Generator 로 Hugo를 선택한 이유 Github page를 만들 때 SSG의 종류들로 Jekyll, Hexo, Hugo 가 많이 언급된다. 그러면 SSG란 무엇인가?? 정적 페이지(Static Site)란 HTML,CSS,JS를 미리 올려서 서버가 바뀌지 않는 HTML page를 보여주는 것을 말한다. 이 정적 페이지를 보다 간편하게 만들어주는 것이 SSG(Static Site Generator)다. 이와 반대로 동적 페이지는 client에 반응하여 HTML page를 동적으로 만들어진 페이지를 말한다. 더 상세한 정보를 원하시는 분은 정적 웹은 뭐고 동적 웹은 뭔가요? 이 영상을 참고하시길 바란다.\nhugo를 선택하기에 앞서 각 SSG의 특징들에 대해 알아야 하기 때문에, Jekyll, Hexo, Hugo의 각 특징들은 다음과 같다.\n Jekyll -루비 기반 -현재 가장 인기 있음(깃헙 별 수 제일 많음) -한글 레퍼런스도 제일 많음 -느리다는 제보가 많음(몇 십개의 포스팅 뿐인데도 빌드 하는데 5분씩 걸린다고) -윈도우 공식 지원 안됨 Hexo -자바스크립트(Node.js) 기반 -한글 레퍼런스 꽤 많음 -메인 개발자가 손을 놓은 듯 -개발자가 중국인? 이라 구글링하면 중국어 글이 많이 나옴 Hugo -Golang 기반 -빌드 빠름 -문서화 잘돼있음 -깃헙 별 수가 헥소보다 많음 -한글 레퍼런스가 거의 없음 출처: http://tadakichi.tistory.com/188 그래서 4가지 이유로 Hugo를 선택했다.\n 남들이 안해본 걸 해보자. 한글 레퍼런스가 거의 없기 때문에, 내가 기여할 수 있는 부분이 다른 것보다 있을 것이다. 내가 원하는 디자인 대부분이 Hugo였다. 앞으로 계속해서 기술 블로그를 작성할 것이기 때문에, 빠른 빌드를 원했다.  두 번째 이유의 경우, 맨 처음에 Hugo의 존재를 모른 상태에서 jekyll이 많이 사용된다고 하여, 처음에 jekyll로 github page를 만들었다. 그래서 Hugo와 비교했을 때, 훨씬 Jekyll이 한글 레퍼런스가 많다는 걸 알았다.\n 2. Github page 만들기 위한 local 환경 조성   git을 설치한다. 그리고, github 에 가입한다. Visual Studio Code (VSC), Atom 같은 에디터를 설치한다. window 환경에 Hugo를 설치한다.   첫 번째, github 가입은 Github 에 들어가서 오른쪽 상단에 있는 Sign up을 클릭하여 진행한다. 그러면 최종적으로 https://github.com/user-name/ 을 가진다. 이것이 github blog다. github page는 [user-name].github.io 로 가진다.\n두 번째, 나는 visual studio code를 사용한다. visual studio code 여기에 들어가 설치한다.\n세 번째, window 환경에 hugo를 설치한다. window에서 Hugo 설치하기 이 영상 하나 따라하면 쉽다. 하지만, 글로 보고 싶은 분들을 위해 작성한다.\n hugo 다운로드 로 들어가서 아래로 scroll을 내리면 window 버전을 다운받아 C:\\Hugo\\bin 디렉토리를 생성해서 다운받은 압축 파일을 해제 어느 위치에서나 Hugo가 실행할 수 있도록 윈도우 검색으로 시스템 환경 변수 편집을 검색하여 들어간다. 고급 탭의 환경 변수 로 들어간다. 사용자 변수 란의 path를 클릭 후, 편집 을 클릭한다. 새로 만들기를 클릭하여 C:\\Hugo\\bin 경로를 추가한다. cmd에 echo %PATH% 를 입력하여 추가한 경로가 있는지 확인한다. 해제한 압축 파일에서 hugo 실행하여 설치 후, cmd에 hugo version 으로 동작 확인한다.   3. 새로운 2개 github repo 와 local 연결하기 3.1 Submodule 개념 이해하기 이 단계를 진행하기 전에 submodule 개념을 알아야 한다. 영어 독해가 가능하신 분들은 How to Set Up a Hugo Site on Github Pages - with Git Submodules! 이 링크에 들어가 보시기 바란다. submodule에 대해 그림과 함께 잘 설명되어있다. 아래 내용은 위 블로그에서 submodule에 대한 부분을 번역한 내용이다. 오역이 있다면 댓글로 알려주시면 감사하겠다.\n public folder는 [3.4 B repo를 public 폴더에 submodule로 연결하기] 파트에서 아래 명령어로 만들어진다.\n지금 이 명령어를 입력하지 않고, 이런 개념이 있구나 정도만 이해하기.\n# blog 폴더의 submodule로 branch main에 B repo를 add 한다. # sample: git submodule add https://github.com/JeHa00/JeHa00.github.io.git public \u0026gt; git submodule add -b main https://github.com/\u0026lt;user-name\u0026gt;/\u0026lt;B repo 명칭\u0026gt;.git public  출처: How to Set Up a Hugo Site on Github Pages - with Git Submodules!\n왜 Git submodule인가?? 모든 git project는 repository에 저장된다. 이 git submodule은 한 레포 안에서 다른 레포를 참조하도록 해준다. 그래서 프로젝트 안에 프로젝트를 효과적으로 운영할 수 있다. 중요한 건 submodule은 main project와 달리 자신만의 commit과 branch histroy를 가진다. 그래서 프로젝트들을 분리시킬 수 있다. 이는 매우 강력한 도구다. 아래 그림에서는 git project에서 submodule을 사용할 시, 어떻게 코드가 포함되는지를 보여준다. .... 메인 repository의 submodule로 `public` folder를 하위 폴더로 설정하여, 독립된 branch history를 갖는 개체로 대할 수 있다. 출처: https://www.adamormsby.com/posts/000/how-to-set-up-a-hugo-site-on-github-pages-with-submodules/  A repo가 blog 에 remote origin으로 연결된다. B repo가 public 폴더 형태로, blog의 submodule로 들어간다.  출처: How to Set Up a Hugo Site on Github Pages - with Git Submodules!\n3.2 New repository 2개 만들기  자신의 github에 2개의 repository를 만든다.\n   2개의 repository를 각각 A,B라고 하자.\n  2개의 repository는 public과 private 중 public으로 만든다. private 으로 하면 site에 배포가 안될 수도 있다.\n**주의: 두 repo를 만들 때 주의사항 **\n A repo에는 README.md 만들지 말기: README.md가 있다면 나중에 git push 시에 충돌이 일어난다. B repo에 README.md를 만들기: repo가 비어있으면 submodule로 연결이 안된다.    A는 user-name/blog 로, B는 user-name/user-name.github.io 로 명칭을 만든다.\nex) A의 url은 github.com/JeHa00/blog / B의 url은 github/JeHa00/JeHa00.github.io\n  B repo의 이름이 github page로 쓰일 url.\n  3.3 Hugo new site 생성및 remote add origin A repo 실행  Visual Studio Code의 terminal 또는 Window의 cmd에 입력한다.\n 경로 C:\\Hugo # 새로운 Hugo project 생성 # sample: Hugo new site blog \u0026gt; Hugo new site \u0026lt;project 명칭\u0026gt; # project folder인 blog로 이동 # sample: cd blog \u0026gt; cd \u0026lt;project 명칭\u0026gt; #3. local git 초기화 \u0026gt; git init # blog의 remote origin으로 A repo 추가하기 # sample: git remote add origin https://github.com/Jeha00/blog.git \u0026gt; git remote add origin https://github.com/\u0026lt;user-name\u0026gt;/\u0026lt;A repo 명칭\u0026gt;.git # commit 하기 위해 모든 파일을 stage에 올리기 \u0026gt; git add . # commit \u0026gt; git commit -m \u0026#34;add origin\u0026#34; # the remote origin 에 push 하겠다. branch는 master로 하겠다. \u0026gt; git push origin master   remote origin이 잘 되었는지 확인하기 위해서는 git remote -v를 입력하면 뜬다.\n  error: src refspec master does not match any 가 뜬다면 이는 stage에 오른 파일이 없다는 의미이므로, git add . 를 했는지 확인하기\n  hugo new site \u0026lt;project 명칭\u0026gt; 명령으로 local에서 컨텐츠를 관리하기 위한 장소 생성\n  이 때 경로는 C:\\Hugo 인 상태에서 terminal에 입력한다.\n  \u0026lt;project 명칭\u0026gt;을 A repo 이름과 똑같이 한다.\n  project를 새로 생성해서 project 파일 경로는 C:\\Hugo\\\u0026lt;project 명칭\u0026gt; 일 것이다.\n  위 명령어로 생긴 tree는 다음과 같다.\n  Hugo/project 명칭 ├─archetypes ├─content ├─data ├─layouts ├─static ├─themes └─config.toml   git remote add origin https://github.com/\u0026lt;user-name\u0026gt;/\u0026lt;A repo 명칭\u0026gt;.git Hugo new site로 만든 project 에 대한 remote origin으로 A repo를 추가하겠다는 의미다.\n  C:\\Hugo\\\u0026lt;project 명칭\u0026gt; 경로에서 git push를 하면 앞으로 A repo에 저장된다.\n  그 결과, A repo안에 구성은 다음과 같다.\n  \u0026lt;user-name\u0026gt;/A repo 이름 ├─archetypes └─config.toml 3.4 B repo를 public 폴더에 submodule로 연결하기 # blog 폴더의 submodule로 branch main에 B repo를 add 한다. # sample: git submodule add https://github.com/JeHa00/JeHa00.github.io.git public \u0026gt; git submodule add -b main https://github.com/\u0026lt;user-name\u0026gt;/\u0026lt;B repo 명칭\u0026gt;.git public  이 명령어로 public 폴더가 생성되고, 이 폴더의 remote origin이 B repo가 된다. public 폴더가 생긴 걸 알 수 있다.  Hugo/project 명칭 ├─archetypes ├─content ├─data ├─layouts ├─public ├─static ├─themes ├─.gitmodules └─config.toml  하지만 public 폴더가 생긴다고 연결된 게 아니다. 확실하게 연결이 되었다면 .gitmodules 파일이 생기고, 이 안에 아래와 같은 코드가 생겨야 한다.  [submodule \u0026quot;public\u0026quot;] path = public url = https://github.com/JeHa00/jeha0.github.io.git branch = main   만약 public folder는 생겼지만, .gitmodules와 위 코드가 없다면 다음 조치를 취한다.\n  첫 번째, public folder를 삭제한다.\n  두 번째, local 문서에서 C:\\Hugo\\\u0026lt;new project 명칭\u0026gt; folder로 들어가 숨긴 파일 보이기를 하여, .git 폴더의 modules 폴더를 삭제한다.\n  세 번째, terminal에 C:\\Hugo\\\u0026lt;new project 명칭\u0026gt; 경로에서 git rm --cached public 을 입력한다.\n  첫 번째, 두 번째만 실행한다면 다음과 같은 error 종류들이 뜰 수 있다.\nerror: 'public' does not have a commit checked out\nerror: 'public' already exists in the index\nerror: a git directory for 'public' is found locally with remote(s)\n  이렇게 뜨는 이유는 cach에 public이 아직 남아있기 때문이다. 그래서 이를 제거하고자 git rm --cached public 을 입력한다.\n  그리고, 다시 submodule 명령어를 실행하여, .gitmodules 에 위 코드가 생기는지 확인한다.\n  다시 https://github.com/\u0026lt;user-name\u0026gt;/blog.git 에 public @ 폴더가 생겼는지 확인한다. 이 폴더가 생겼다면 submodule 등록이 확실하게 완료되었다.\n  만약, Permission denied (publickey) 오류가 뜬다면 SSH 보안키를 등록해야한다.\n  위 방법대로 했지만 public 폴더와 B repo가 submodule 연결이 되지 않는다면, B repo에 아무런 file이 존재하지 않아서다.\n  3.2 New repository 2개 만들기 내용처럼 B repo에 README.md를 추가하여 empty repo로 만들지 말자.\n  3.5 public directory와 project root directoy git push 단계 # public directory에 site build 수행하기 \u0026gt; hugo # public dicrectory로 이동 \u0026gt; cd public \u0026gt; git add . \u0026gt; git commit -m \u0026#39;first build\u0026#39; \u0026gt; git push origin main # the project root 로 되돌아가기 \u0026gt; cd .. \u0026gt; git add . \u0026gt; git commit -m \u0026#39;first build - update submodule reference\u0026#39; \u0026gt; git push origin master  위 명령어로 생긴 tree는 다음과 같다.  Hugo/\u0026lt;project 명칭\u0026gt; ├─archetypes ├─content ├─data ├─layouts ├─public │ ├─categories │ └─tags ├─resources │ │─_gen │ ├─assets │ └─images ├─static │─themes ├─.gitmodules └─config.toml  A repo의 directory 내부 구성은 아래와 같다. 아래 image처럼 public@가 떠야 한다. submodule이 잘 연결되었다는 의미다.    4. Github page에 theme 적용  원하는 테마 찾기\n   Hugo Theme Star Ranking, jamstackthemes 그리고, Hugo Themes: Complete List 이 3가지 사이트 정도라면 충분히 찾을 수 있다.\n  처음에 테마 찾는 데 많은 시간을 썼는데, 지금 생각해보면 기본 테마를 찾은 다음에 customizing 하는 방법이 더 빠른 방향이었다.\n   submodule을 사용하여 테마 적용하기\n   submodule로 테마를 적용한 이유는 업데이트된 테마를 쉽게 가져올 수 있기 때문에, clone보다 submodule로 만드는 게 더 낫다고 한다. (by submodule이 나은 이유)\n  테마 또한 submodule로 적용한다. 구조는 아래와 같다.   출처: How to Set Up a Hugo Site on Github Pages - with Git Submodules!\n경로 C:\\Hugo\\\u0026lt;New Project 명칭\u0026gt; # root project folder에 submodule로 테마를 적용한다 # git submodule add .git themes/Paper-Mod \u0026gt; git submodule add \u0026lt;theme 경로\u0026gt;.git themes/\u0026lt;테마명\u0026gt;   원하는 theme을 fork 한다.\n  fork를 하는 이유는 테마를 직접 수정할 수 없고, 수정한 버전을 유지하기 어렵기 때문에, fork하여 자신의 github으로 가져온다.\n  fork한 테마의 경로를 복사하는 방법은 다음과 같다.   위 이미지에서 url 옆에 있는 버튼을 클릭하면 복사된다.\n  git submodule add \u0026lt;theme 경로\u0026gt;.git themes/\u0026lt;테마명\u0026gt; 에서 themes란 밑에 이미지의 themes folder를 말한다. 이 folder 밑에 \u0026lt;테마명\u0026gt; folder를 만들어, 테마 자료들을 다운받는다는 의미다.\n  Hugo/\u0026lt;project 명칭\u0026gt; ├─archetypes ├─content ├─data ├─layouts ├─public │ ├─categories │ └─tags ├─resources │ │─_gen │ ├─assets │ └─images ├─static │─themes │ └─\u0026lt;테마명\u0026gt; ├─.gitmodules └─config.toml  다음으로 config.toml 에 theme = 이 없으면 추가하여, theme = \u0026lt;테마명\u0026gt; 을 적는다. BaseURL을 B repo의 끝 부분인 https://\u0026lt;user-name\u0026gt;.github.io/ 로 수정한다. 이 경로가 앞으로 github page의 URL이 된다. theme 적용 또한 submodule이므로 .gitmodules 파일에 다음과 같이 2개가 등록되었다.  #example [submodule \u0026#34;public\u0026#34;] path = public url = https://github.com/\u0026lt;user-name\u0026gt;/\u0026lt;B repo 명칭\u0026gt;.git branch = main [submodule \u0026#34;\u0026lt;테마명\u0026gt;\u0026#34;] path = themes/\u0026lt;테마명\u0026gt; url = 테마 url  theme 적용 후, theme 폴더 안에 examplesite 란 의미의 폴더가 있다면, 그 폴더 안에 있는 config.toml을 복사하여 C:\\Hugo\\\u0026lt;New Project 명칭\u0026gt; 경로에 있는 config.toml에 복사 붙여 넣는다. BaseURL만 다시 수정한다.   테마 적용되었는지 테스트하기\n 경로 C:\\Hugo\\\u0026lt;New Project 명칭\u0026gt; # D 란 draft 문서까지 포함해서 보겠다는 의미다. \u0026gt; hugo server -D  그러면 https://localhost:1313/ 이 뜬다. 이를 클릭하면 테마가 적용되었는지 알 수 있다. terminal 작업을 다시 할려면 Ctrl + C를 눌러 중단한다. hugo server -D 가 돌아가는 동안에는 글의 수정을 바로 확인할 수 있다.   5. Contents 생성과 업로드, utterances로 댓글 기능 추가, deploy.sh로 자동화 5.1 Contents 생성과 업로드  Contents 생성과 public folder에 반영하기\n 경로 C:\\Hugo\\\u0026lt;New Project 명칭\u0026gt; # contents 생성 \u0026gt; hugo new post/test1.md # 생성된 글 public 폴더에 반영하기 \u0026gt; hugo -t \u0026lt;테마이름\u0026gt;   hugo new post/test1.md는 \\content\\post\\test1.md 경로로 생성된다.\n  contents 생성 후, hugo server -D로 localhost에는 생성한 contents가 보이는데, github page에는 안보인다면 hugo -t \u0026lt;테마이름\u0026gt;명령을 하지 않았기 때문이다.\n  여기서 \u0026lt;테마이름\u0026gt;은 git submodule add \u0026lt;theme 경로\u0026gt;.git themes/\u0026lt;테마명\u0026gt; 에서 테마명과 동일해야 한다.\n   컨텐츠 업로드\n # public dicrectory로 이동 \u0026gt; cd public \u0026gt; git add . \u0026gt; git commit -m \u0026#39;commit message\u0026#39; \u0026gt; git push origin main # the project root 로 되돌아가기 \u0026gt; cd .. \u0026gt; git add . \u0026gt; git commit -m \u0026#39;commit message\u0026#39; \u0026gt; git push origin master 5.2 Utterances로 댓글 기능 추가  사용 방법\n Github에 \u0026lt;user-name\u0026gt;/blog-comments 같이 private이 아닌 public 저장소를 만든다. Utterance에서 1번에서 만든 repository를 입력한다. Utterance에서 Mapping 방식 6가지 중 한 가지를 선택한다. 2번 3번에 따라 Utterance에서 생성된 script를 복사하여 각자의 적절한 템플릿 위치가 추가한다. 추가 위치는 각 theme의 README.md 를 꼼꼼히 읽어본다.   아웃사이더님의 블로그 글에서 보고 가져온다.\n5.3 deploy.sh로 자동화  deploy.sh 파일명으로 아래 코드를 저장한 후, C:\\Hugo\\\u0026lt;프로젝트 명칭\u0026gt; 경로에 저장한다. 이후 Git Bash 프로그램을 사용하여 C:\\Hugo\\\u0026lt;프로젝트 명칭\u0026gt; 경로로 이동 후, bash deploy.sh를 입력하면 the project root와 submodule 모두 순차적으로 push가 실행된다. 나는 submodule은 main default branch에, the project root는 master default branch로 설정했다.\n #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026#34; # Build the project. hugo -t \u0026lt;테마명\u0026gt; # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. ## master 대신 각자 연결한 branch 명으로 수정하면 된다. git push origin main # Come Back up to the Project Root cd .. # blog 저장소 Commit \u0026amp; Push git add . msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; ## master 대신 각자 연결한 branch 명으로 수정하면 된다. git push origin master  6. To customize blog theme   커스텀마이징을 위한 제일 좋은 방법은 각자 선택한 테마 템플릿의 README.md를 꼼꼼히 읽어보는 게 제일 빠른 지름길이라 생각한다. 사용자가 원하는 기능들을 어떻게 추가하면 되는지 설명해논 템플릿이 많기 때문에, 반드시 README.md 를 꼼꼼히 읽기 바란다.   7. 후기   git에 대해 더 숙지를 하고 나서 git page를 만들기 시작했다면 시간 소모를 줄일 수 있었을 것이다. 급한 마음에 github page를 시작하여 생각보다 많은 시행착오와 error들을 격었다. 이 error들은 대체로 git을 정확히 이해하지 못해서 발생하는 문제점들이다. 이번 일을 통해서 git이 개발자에게 사람의 숨쉬기와 같다는 걸 느껴서 Pro git 이란 책을 사서 꾸준히 공부하기로 결정했다. gith page를 만들었으니, TIL부터 시작하여 꾸준히 공부하자. Hugo를 선택한 것이 처음 시도할 때는 매우 힘들었지만, 지금 와서는 잘한 선택임을 느낀다. 진행하다가 부딪힌 error들에 대해서는 바로 바로 기록을 하자. 이는 반복적인 똑같은 삽질을 예방할 수 있다.   Reference   정적 웹은 뭐고 동적 웹은 뭔가요?\n  Jekyll, Hexo, Hugo 차이점 설명\n  Hugo로 Github.io 블로그 만들기\n  How to Set Up a Hugo Site on Github Pages - with Git Submodules!\n  theme 적용에 submodule이 나은 이유\n  아웃사이더님의 블로그 글\n  ","permalink":"http://jeha00.github.io/post/hugo%EB%A1%9C-github-page-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/","summary":"SSG의 한 종류 \u0026lsquo;Hugo\u0026rsquo;와 \u0026lsquo;git remote, git submodule\u0026rsquo;로 Github page를 만든다. 그 후, 컨텐츠 생성과 업로드를 한다. 마지막으로 utterances로 댓글 기능 추가, deploy.sh를 사용하여 업로드하는 방법을 다룬다.","title":"Window에서 Hugo로 Github page 만들고 배포하기"}]